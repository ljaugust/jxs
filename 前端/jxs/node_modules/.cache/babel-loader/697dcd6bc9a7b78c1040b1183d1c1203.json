{"remainingRequest":"D:\\HBuilderX 项目\\jxs\\node_modules\\babel-loader\\lib\\index.js!D:\\HBuilderX 项目\\jxs\\src\\api\\http.js","dependencies":[{"path":"D:\\HBuilderX 项目\\jxs\\src\\api\\http.js","mtime":1588687593734},{"path":"D:\\HBuilderX 项目\\jxs\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\HBuilderX 项目\\jxs\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport axios from 'axios';\nimport store from \"../vuex/store\";\naxios.defaults.withCredentials = true; //添加一个请求拦截器\n\naxios.interceptors.request.use(function (config) {\n  // 判断是否存在token，如果存在的话，则每个http header都加上token\n  if (store.getters.token) {\n    config.headers.Authorization = store.getters.token;\n  }\n\n  store.state.loading = true;\n  console.log(\"请求完毕\");\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // 添加一个响应拦截器\n\naxios.interceptors.response.use(function (response) {\n  store.state.loading = false;\n  console.log(\"响应完毕\");\n  return response;\n}, function (error) {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 返回 401 清除token信息并跳转到登录页面\n        store.commit('removeToken');\n        store.commit('removeUser');\n        router.replace({\n          path: '/login',\n          query: {\n            redirect: router.fullPath\n          }\n        });\n    }\n  }\n\n  store.state.loading = false;\n  return Promise.reject(error);\n}); //基地址\n\nvar base = \"http://localhost:8002\"; //通用方法\n\nexport var POST = function POST(url, params) {\n  return axios.post(\"\".concat(base).concat(url), params).then(function (res) {\n    return res.data;\n  });\n};\nexport var GET = function GET(url, params) {\n  return axios.get(\"\".concat(base).concat(url), {\n    params: params\n  }).then(function (res) {\n    return res.data;\n  });\n};\nexport var PUT = function PUT(url, params) {\n  return axios.put(\"\".concat(base).concat(url), params).then(function (res) {\n    return res.data;\n  });\n};\nexport var DELETE = function DELETE(url, params) {\n  return axios.delete(\"\".concat(base).concat(url), {\n    params: params\n  }).then(function (res) {\n    return res.data;\n  });\n};\nexport var PATCH = function PATCH(url, params) {\n  return axios.patch(\"\".concat(base).concat(url), params).then(function (res) {\n    return res.data;\n  });\n};",{"version":3,"sources":["D:/HBuilderX 项目/jxs/src/api/http.js"],"names":["axios","store","defaults","withCredentials","interceptors","request","use","config","getters","token","headers","Authorization","state","loading","console","log","error","Promise","reject","response","status","commit","router","replace","path","query","redirect","fullPath","base","POST","url","params","post","then","res","data","GET","get","PUT","put","DELETE","delete","PATCH","patch"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport store from \"../vuex/store\";\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\n//添加一个请求拦截器\r\naxios.interceptors.request.use(\r\n\tconfig => {\r\n\t\t// 判断是否存在token，如果存在的话，则每个http header都加上token\r\n\t\tif (store.getters.token) {\r\n\t\t\tconfig.headers.Authorization = store.getters.token;\r\n\t\t}\r\n\t\tstore.state.loading = true\r\n\t\tconsole.log(\"请求完毕\")\r\n\t\treturn config\r\n\t},\r\n\terror => {\r\n\t\treturn Promise.reject(error)\r\n\t}\r\n);\r\n\r\n// 添加一个响应拦截器\r\naxios.interceptors.response.use(function(response) {\r\n\tstore.state.loading = false\r\n\tconsole.log(\"响应完毕\")\r\n\treturn response\r\n}, function(error) {\r\n\tif (error.response) {\r\n\t\tswitch (error.response.status) {\r\n\t\t\tcase 401:\r\n\t\t\t\t// 返回 401 清除token信息并跳转到登录页面\r\n\t\t\t\tstore.commit('removeToken');\r\n\t\t\t\tstore.commit('removeUser');\r\n\t\t\t\trouter.replace({\r\n\t\t\t\t\tpath: '/login',\r\n\t\t\t\t\tquery: {\r\n\t\t\t\t\t\tredirect: router.fullPath\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t}\r\n\t}\r\n\tstore.state.loading = false\r\n\treturn Promise.reject(error);\r\n});\r\n\r\n//基地址\r\nlet base = \"http://localhost:8002\"\r\n\r\n\r\n//通用方法\r\nexport const POST = (url, params) => {\r\n\treturn axios.post(`${base}${url}`, params).then(res => res.data)\r\n}\r\n\r\nexport const GET = (url, params) => {\r\n\treturn axios.get(`${base}${url}`, {\r\n\t\tparams: params\r\n\t}).then(res => res.data)\r\n}\r\n\r\nexport const PUT = (url, params) => {\r\n\treturn axios.put(`${base}${url}`, params).then(res => res.data)\r\n}\r\n\r\nexport const DELETE = (url, params) => {\r\n\treturn axios.delete(`${base}${url}`, {\r\n\t\tparams: params\r\n\t}).then(res => res.data)\r\n}\r\n\r\nexport const PATCH = (url, params) => {\r\n\treturn axios.patch(`${base}${url}`, params).then(res => res.data)\r\n}\n"]}]}